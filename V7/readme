首先完成一个工作，可以根据浏览器地址栏中通过改变抽象路径部分请求到服务端webapps下对应网络应用
中的某个页面
思路：
浏览器地址栏输入的路径如：http://localhost:8088/myweb/index.html
其中的/myweb/index.html部分会体现在请求的请求行中的uri部分，即抽象路径部分。
而这部分我们已经在之前的版本中通过解析请求保存在了HttpRequest的uri属性上了。
因此ClientHandler可以在解析请求后通过获取HttpRequest中这个属性的值，在实例化File对象时在
webapps目录下通过uri的值定位到这个文件，从而将该页面响应给浏览器。

实现：
1：先在HttpRequest中提供属性对应的GET方法，以便外界可以获取到这些信息。
2：在ClientHandler处理请求的环节根据HttpRequest获取的抽象路径部分(uri属性的值),来定位
webapps下的文件。
3：利用上个版本发送响应的代码将这个页面发送回去。
这样一来，浏览器就可以通过改变地址栏中的抽象路径部分，请求到服务端不同的页面了。





上述操作完成后，会出现一个新情况：如果地址栏中抽象路径输入的地址在webapps下没有对应的文件时，
服务端在读取该File表示的文件就会抛出异常。但实际上，当浏览器输入的抽象路径没有对应的资源时，
这就是典型的应当返回404状态码的情况了。
因此我们要完成响应404的操作。

实现：
1：在webapps下新建一个目录root
   这个目录存放所有共用的页面，比如404页面，无论用户将来请求哪个网络应用下的资源都可能出现该
   资源不存在的情况，因此都应响应404页面。
2：在root下新建页面：404.html
   该页面居中显示一行字：404，该资源不存在！
3：在ClientHandler处理请求的环节，当根据抽象路径去webapps下定义资源后(实例化File对象)，添加
   分支如果该资源存在则响应，如果该资源不存在或定位到的是一个目录，则响应404
   404的响应要做几个变化：
   3.1：状态代码要改为404，状态描述改为NotFound
   3.2：响应头Content-Length的长度是404页面的长度
   3.3：响应正文发送的应当是404.html这个页面内容






